                                                                                 local Rayfield=       
                                                                        loadstring(game:HttpGet(                        
                                                                    "https://sirius.menu/rayfield"))();Rayfield:Notify({Title=    
                                                                "Credits",Content="Made by CrxDev",Duration=6.5,Image="bell"});local    
                                                            Window=Rayfield:CreateWindow({Name="Project: Butterfly v1.1",Icon=0,          
                                                          LoadingTitle="Project: Butterfly v1.1",LoadingSubtitle="by CrxDev",Theme=         
                                                        "Default",DisableRayfieldPrompts=false,DisableBuildWarnings=false,ConfigurationSaving 
                                                      ={Enabled=false,FolderName=nil,FileName="Big Hub"},Keybinds={ToggleMenu=Enum.KeyCode.     
                                                    RightControl}});Rayfield:Notify({Title="Credits",Content="Made by CrxDev",Duration=6.5,Image= 
                                                  "https://tr.rbxcdn.com/180DAY-b1b14f564800791d577056f5f43914d1/768/432/Image/Webp/noFilter"});    
                                                  local player=game.Players.LocalPlayer;local character=player.Character or player.CharacterAdded:    
                                                Wait() ;local humanoidRootPart=character:WaitForChild("HumanoidRootPart");local abilitiesFolder=        
                                                workspace:WaitForChild("abilities");local tokensFolder=abilitiesFolder:WaitForChild("tokens");local       
                                              fieldFolder=workspace:WaitForChild("fields");local currentNectar=game:GetService("ReplicatedStorage"):        
                                              WaitForChild("userDatas"):WaitForChild(tostring(player.UserId)):WaitForChild("misc"):WaitForChild("nectar").  
                                            Value;local autoCollectEnabled=false;local converting=false;local moving=false;local fieldsList={};local          
                                            selectedFieldPosition=nil;local function addAllFieldsToList() for _,field in pairs(fieldFolder:GetChildren()) do    
                                          table.insert(fieldsList,{Name=field.Name,Position=(field:FindFirstChild("10:10") and field["10:10"].Position) or field. 
                                          Position });end end addAllFieldsToList();local codesList={};local function addAllCodesToList() local codesFolder=game:    
                                          GetService("ReplicatedStorage"):WaitForChild("userDatas"):WaitForChild(tostring(player.UserId)):WaitForChild("misc"):       
                                          WaitForChild("codes");for _,code in pairs(codesFolder:GetChildren()) do table.insert(codesList,code.Name);end end           
                                        addAllCodesToList();local function parseValue(str) local multiplier=1;local s=str:lower();if s:find("k") then multiplier=1000;s 
                                        =s:gsub("k","");elseif s:find("m") then multiplier=1000000;s=s:gsub(  --[[==============================]]"m","");elseif s:find(  
                                        "b") then multiplier=1000000000;s=s:gsub("b","");end s=s:   --[[============================================]]gsub("[^%d%.]",""); 
                                        local num=tonumber(s);if num then return num *          --[[======================================================]]multiplier ;end 
                                       return 0;end local function checkCapacity() local    --[[==========================================================]]label=game.       
                                      Players.LocalPlayer.PlayerGui.main.tr_header.labels --[[==============================================================]].nectar.amount; 
                                      local leftValue,rightValue=label.Text:match(        --[[================================================================]]                
                                      "([^/]+)%s*/%s*([^/]+)");if (leftValue and          --[[==================================================================]]rightValue)   
                                      then local leftNum=parseValue(leftValue);local      --[[==================================================================]]rightNum=         
                                    parseValue(rightValue);print("Current Nectar:",       --[[====================================================================]]leftNum);     
                    print("Max Nectar:",rightNum);print("Bag Full:",leftNum==rightNum );  --[[====================================================================]]if (leftNum and 
               rightNum and (leftNum==rightNum)) then capacityFull=true;else capacityFull --[[======================================================================]]=false;end    
            end end local function redeemCodes() for _,code in pairs(codesList) do game:  --[[======================================================================]]GetService(   
          "ReplicatedStorage").remotes.redeemCode:InvokeServer(code);print(code,          --[[======================================================================]]"redeemed");  
        end end local function convertNectar() converting=true;local player=game.Players. --[[======================================================================]]LocalPlayer;  
        if (player and player.Character) then local humanoid=player.Character:            --[[======================================================================]]              
      FindFirstChildOfClass("Humanoid");if humanoid then humanoid.Health=0;end end wait(7 --[[======================================================================]]);game:       
      GetService("ReplicatedStorage").remotes.convert:FireServer();local leftNum=parseValue --[[==================================================================]](game.Players.  
      LocalPlayer.PlayerGui.main.tr_header.labels.nectar.amount.Text:match(                 --[[================================================================]]                  
    "([^/]+)%s*/%s*([^/]+)"));while leftNum>0  do wait(0.1);leftNum=parseValue(game.Players --[[==============================================================]].LocalPlayer.     
    PlayerGui.main.tr_header.labels.nectar.amount.Text:match("([^/]+)%s*/%s*([^/]+)"));end    --[[==========================================================]]converting=false;   
    capacityFull=false;print("Debug: Nectar conversion complete, capacityFull set to false");   --[[====================================================]]end local function      
    getFieldPositionByName(fieldName) for _,field in pairs(fieldsList) do if (field.Name==        --[[==============================================]]fieldName) then return    
    field.Position;end end return nil;end local function moveToPosition(position) local tweenService= --[[====================================]]game:GetService(              
    "TweenService");local tweenInfo=TweenInfo.new((humanoidRootPart.Position-position).Magnitude/100 ,    --[[========================]]Enum.EasingStyle.Linear);local goal={ 
    CFrame=CFrame.new(position + Vector3.new(0,3,0) )};local tween=tweenService:Create(humanoidRootPart,tweenInfo,goal);tween:Play();tween.Completed:Wait();end local       
  hivePositions={["1"]=Vector3.new(273.728,11.078, -225.761),["2"]=Vector3.new(225.879,11.078, -205.065),["3"]=Vector3.new(178.685,11.078, -195.803),["4"]=Vector3.new(   
  126.233,11.078, -194.864),["5"]=Vector3.new(78.618,11.078, -203.266),["6"]=Vector3.new(31.183,11.078, -225.712)};local selectedHivePosition=nil;local                 
  autoAttackEnabled=false;local function autoAttackMobs() while autoAttackEnabled do local mobsFolder=workspace:FindFirstChild("mobs");if mobsFolder then for _,mob in    
  pairs(mobsFolder:GetChildren()) do if (mob and mob.Parent) then game:GetService("ReplicatedStorage").remotes.targetButterfly:FireServer(mob);end end end wait(1);end    
  end local function collectTokens() if  not autoCollectEnabled then return;end for _,category in pairs(tokensFolder:GetChildren()) do for _,token in pairs(category:     
  GetChildren()) do if (token:IsA("Model") and token:FindFirstChild("hitbox")) then moveToPosition(token.hitbox.Position);wait(0.1);end end end end local function        
  handleAutoUseToolToggle(Value) if Value then autoUseToolEnabled=true;task.spawn(function() while autoUseToolEnabled do wait();game:GetService("ReplicatedStorage").     
  remotes.toolUse:InvokeServer();end end);else autoUseToolEnabled=false;end end local Tab=Window:CreateTab("Main",4483362458);local Section=Tab:CreateSection("Farming"); 
  local fieldNames={};for _,field in pairs(fieldsList) do table.insert(fieldNames,field.Name);end Tab:CreateDropdown({Name="Select Field",Options=fieldNames,             
  CurrentOption="None",MultipleOptions=false,Flag="FieldDropdown",Callback=function(Option) local selectedOption=Option;if (type(Option)=="table") then selectedOption=   
  Option[1];end selectedFieldPosition=getFieldPositionByName(selectedOption);if selectedFieldPosition then print("Selected Field Position:",selectedFieldPosition);else   
  warn("No field found for option:",selectedOption);end end});local autoMoveFieldEnabled=false;Tab:CreateToggle({Name="Auto Farm Selected Field",CurrentValue=false,Flag=   
  "MoveFieldToggle",Callback=function(Value) autoMoveFieldEnabled=Value;if autoMoveFieldEnabled then if selectedFieldPosition then task.spawn(function() while              
  autoMoveFieldEnabled do character=player.Character or player.CharacterAdded:Wait() ;humanoidRootPart=character:WaitForChild("HumanoidRootPart");checkCapacity();if        
  capacityFull then print("Debug: Capacity full, converting nectar");convertNectar();print("Debug: Nectar converted");wait(1);else print("Debug: Moving back to field");    
  moving=true;moveToPosition(selectedFieldPosition);moving=false;wait(5);end wait(0.1);end end);else warn("No field selected");end end end});local Section=Tab:             
  CreateSection("Hive");Tab:CreateToggle({Name="Auto Use Tool",CurrentValue=false,Flag="Toggle1",Callback=function(Value) handleAutoUseToolToggle(Value);end});Tab:         
  CreateToggle({Name="Auto Collect Tokens",CurrentValue=false,Flag="TokenToggle",Callback=function(Value) autoCollectEnabled=Value;if (autoCollectEnabled and  not          
  converting) then task.spawn(function() while autoCollectEnabled do collectTokens();wait();end end);end end});Tab:CreateToggle({Name="Auto Attack Mobs",CurrentValue=false 
  ,Flag="AutoAttackToggle",Callback=function(Value) autoAttackEnabled=Value;if autoAttackEnabled then task.spawn(autoAttackMobs);end end});local MiscTab=Window:CreateTab(  
  "Misc","Settings");local Paragraph=MiscTab:CreateParagraph({Title="Credits",Content="Made by CrxD"});MiscTab:CreateButton({Name="Redeem All Codes",Callback=function()    
  redeemCodes();end});MiscTab:CreateToggle({Name="Anti AFK",Callback=function(Value) while Value do local vu=game:GetService("VirtualUser");game:GetService("Players").     
  LocalPlayer.Idled:Connect(function() vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame);task.wait(0.1);vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera 
  .CFrame);end);print("Ignore this i just put the message to check if the Anti AFK Runs");wait(300);end end});
